plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.97'
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
}

base {
    archivesName = mod_id
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

//minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
//minecraft.accessTransformers.entry public net.minecraft.client.Minecraft textureManager # textureManager

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }


dependencies {
    // Specify the version of Minecraft to use.
    // Depending on the plugin applied there are several options. We will assume you applied the userdev plugin as shown above.
    // The group for userdev is net.neoforged, the module name is neoforge, and the version is the same as the neoforge version.
    // You can however also use the vanilla plugin (net.neoforged.gradle.vanilla) to use a version of Minecraft without the neoforge loader.
    // And its provides the option to then use net.minecraft as the group, and one of; client, server or joined as the module name, plus the game version as version.
    // For all intends and purposes: You can treat this dependency as if it is a normal library you would use.
    implementation "net.neoforged:neoforge:${neo_version}"

    // Example mod dependency with JEI
    // The JEI API is declared for compile time use, while the full JEI artifact is used at runtime
    // compileOnly "mezz.jei:jei-${mc_version}-common-api:${jei_version}"
    // compileOnly "mezz.jei:jei-${mc_version}-forge-api:${jei_version}"
    // runtimeOnly "mezz.jei:jei-${mc_version}-forge:${jei_version}"

    // Example mod dependency using a mod jar from ./libs with a flat dir repository
    // This maps to ./libs/coolmod-${mc_version}-${coolmod_version}.jar
    // The group id is ignored when searching -- in this case, it is "blank"
    // implementation "blank:coolmod-${mc_version}:${coolmod_version}"

    // Example mod dependency using a file as dependency
    // implementation files("libs/coolmod-${mc_version}-${coolmod_version}.jar")

    // Example project dependency using a sister or child project:
    // implementation project(":myproject")

    // For more info:
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml']) {
        expand replaceProperties + [project: project]
    }
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// generation stuff
class ItemJSONTask extends DefaultTask {
    private String MODID = 'bitlabs'

    def writeToFile(name, type){
        String s = ""
        if(type == ("egg")){
            name = name + "_egg"
            s = "{\"parent\": \"minecraft:item/template_spawn_egg\"}"
//            System.out.println(s)
        }else{
            s = "{\"parent\": \"item/" + type.toLowerCase() + "\",\"textures\": {\"layer0\": \"" + MODID + ":item/" + name + "\"}}"
        }

        // create the folders if it does not exist.(otherwise it will throw exception)
        File extraFolder = new File( "${project.projectDir}/src/main/resources/assets/"+MODID+"/models/item")
        if( !extraFolder.exists() ) {
            extraFolder.mkdirs()
        }
        // create the file and write text to it.
        new File("${project.projectDir}/src/main/resources/assets/"+MODID+"/models/item/"+name+".json").text = s
    }

    @TaskAction
    def greet() {
        String[] listy
        new File("${project.projectDir}/src/main/resources/generate/items").eachLine { line ->
            listy = line.split(" ")
            writeToFile(listy[1], listy[0])
        }
    }
}

task generateItemJSONs(type: ItemJSONTask){
    group = 'forgegradle runs'
    description = 'A gradle task to generate all item jsons from the items file. Use generated for regular items, handheld for tools, and egg for entity egg jsons.'
}

class BlockJSONTask extends DefaultTask {
    private String MODID = 'bitlabs'

    def blockstatesJSON(name){

        StringBuilder builder = new StringBuilder();

        builder.append("{\"variants\": {\"\": {\"model\": \"" + MODID + ":block/" + name + "\"}}}")

        String s = builder.toString()

        // create the folders if it does not exist.(otherwise it will throw exception)
        File extraFolder = new File( "${project.projectDir}/src/main/resources/assets/"+MODID+"/blockstates")
        if( !extraFolder.exists() ) {
            extraFolder.mkdirs()
        }
        // create the file and write text to it.
        new File("${project.projectDir}/src/main/resources/assets/"+MODID+"/blockstates/"+name+".json").text = s
    }

    def blockJSONMulti(name){

        StringBuilder builder = new StringBuilder();

        builder.append("{");
        builder.append("\"parent\": \"minecraft:block/" + "bedrock" + "\",");

        builder.append("\"textures\": {");
        // What this does is that it generates a json that has different textures for each side, but only uses two
        // textures. Obviously this can be extended to have more than just 2 textures, and in theory you could make
        // each side of the block unique. For this case, the textures on the top and bottom must be called "[block_name]_top"
        //and the texture on the sides "[block_name]_sides"
        builder.append(" \"up\": \"" + MODID + ":block/" + name + "_up" + "\",\n");
        builder.append(" \"down\": \"" + MODID + ":block/" + name + "_down" + "\",\n");
        builder.append(" \"south\": \"" + MODID + ":block/" + name + "_south" + "\",\n");
        builder.append(" \"north\": \"" + MODID + ":block/" + name + "_north" + "\",\n");
        builder.append(" \"west\": \"" + MODID + ":block/" + name + "_west" + "\",\n");
        builder.append(" \"east\": \"" + MODID + ":block/" + name + "_east" + "\"\n");
        builder.append("}");
        builder.append("}");

        String s = builder.toString()

        // create the folders if it does not exist.(otherwise it will throw exception)
        File extraFolder = new File( "${project.projectDir}/src/main/resources/assets/"+MODID+"/models/block")
        if( !extraFolder.exists() ) {
            extraFolder.mkdirs()
        }
        // create the file and write text to it.
        new File("${project.projectDir}/src/main/resources/assets/"+MODID+"/models/block/"+name+".json").text = s
    }
    def blockJSON(name){

        StringBuilder builder = new StringBuilder();

        builder.append("{");
        builder.append("\"parent\": \"minecraft:block/" + "cube_all" + "\",");

        builder.append("\"textures\": {");
        // TODO: Need to figure out how to apply textures properly for various
        // types
        builder.append(" \"all\": \"" + MODID + ":block/" + name + "\"");
        builder.append("}");
        builder.append("}");

        String s = builder.toString()

        // create the folders if it does not exist.(otherwise it will throw exception)
        File extraFolder = new File( "${project.projectDir}/src/main/resources/assets/"+MODID+"/models/block")
        if( !extraFolder.exists() ) {
            extraFolder.mkdirs()
        }
        // create the file and write text to it.
        new File("${project.projectDir}/src/main/resources/assets/"+MODID+"/models/block/"+name+".json").text = s
    }
    def itemJSON(name){

        String s = "{\"parent\": \"" + MODID + ":block/" + name + "\"}"

        // create the folders if it does not exist.(otherwise it will throw exception)
        File extraFolder = new File( "${project.projectDir}/src/main/resources/assets/"+MODID+"/models/item")
        if( !extraFolder.exists() ) {
            extraFolder.mkdirs()
        }
        // create the file and write text to it.
        new File("${project.projectDir}/src/main/resources/assets/"+MODID+"/models/item/"+name+".json").text = s
    }


    @TaskAction
    def greet() {
        String[] listy
        new File("${project.projectDir}/src/main/resources/generate/blocks").eachLine { line ->
            listy = line.split(" ")
            if(listy[0].equals("multi")){
                blockJSONMulti(listy[1])
            }
            if(listy[0].equals("same")){
                blockJSON(listy[1])
            }
            blockstatesJSON(listy[1])
            itemJSON(listy[1])
        }
        // println greeting
    }
}

task generateBlockJSONs(type: BlockJSONTask){
    group = 'forgegradle runs'
    description = 'A gradle task to generate all block jsons in the blocks file. Choose same for all sides to be the same and multi to decide each side of the block (use _up, _down, _south, _north, _east, _west for texture names).'
}

class BlockstateGenTask extends DefaultTask {
    private String MODID = 'bitlabs'

    def writeToFile(name, type) {
        if(type == "block") {
            String s = "{\n" +
                    "  \"type\": \"minecraft:block\",\n" +
                    "  \"pools\": [\n" +
                    "    {\n" +
                    "      \"rolls\": 1.0,\n" +
                    "      \"bonus_rolls\": 0.0,\n" +
                    "      \"entries\": [\n" +
                    "        {\n" +
                    "          \"type\": \"minecraft:item\",\n" +
                    "          \"name\": \"" + MODID + ":" + name + "\"\n" +
                    "        }\n" +
                    "      ],\n" +
                    "      \"conditions\": [\n" +
                    "        {\n" +
                    "          \"condition\": \"minecraft:survives_explosion\"\n" +
                    "        }\n" +
                    "      ]\n" +
                    "    }\n" +
                    "  ]\n" +
                    "}"

            // create the folders if it does not exist.(otherwise it will throw exception)
            File extraFolder = new File("${project.projectDir}/src/main/resources/data/" + MODID + "/loot_tables/blocks")
            if (!extraFolder.exists()) {
                extraFolder.mkdirs()
            }
            // create the file and write text to it.
            new File("${project.projectDir}/src/main/resources/data/" + MODID + "/loot_tables/blocks/" + name + ".json").text = s
        }else if(type == "entity") {

            String s = "{\n" +
                    "  \"type\": \"minecraft:entity\",\n" +
                    "  \"pools\": [\n" +
                    "    {\n" +
                    "      \"rolls\": 1,\n" +
                    "      \"entries\": [\n" +
                    "        {\n" +
                    "          \"type\": \"minecraft:item\",\n" +
                    "          \"name\": \"minecraft:rotten_flesh\"\n" +
                    "        }\n" +
                    "      ]\n" +
                    "    }\n" +
                    "  ]\n" +
                    "}"

            // create the folders if it does not exist.(otherwise it will throw exception)
            File extraFolder = new File("${project.projectDir}/src/main/resources/data/" + MODID + "/loot_tables/entities")
            if (!extraFolder.exists()) {
                extraFolder.mkdirs()
            }
            // create the file and write text to it.
            new File("${project.projectDir}/src/main/resources/data/" + MODID + "/loot_tables/entities/" + name + ".json").text = s


        }
    }
    @TaskAction
    def greet() {
        String[] listy
        new File("${project.projectDir}/src/main/resources/generate/loot").eachLine { line ->
            listy = line.split(" ")
            writeToFile(listy[1], listy[0])
        }
    }

}
task generateLootTables(type: BlockstateGenTask) {
    group = 'forgegradle runs'
    description = 'A gradle task to generate loot tables for blocks to drop themselves.'
}
class RecipeJSONTask extends DefaultTask {
    private String MODID = 'bitlabs'

    def shapedRecipeJSON(name){

        StringBuilder builder = new StringBuilder();


        builder.append("{\n");
        builder.append("\"type\": \"minecraft:crafting_shaped\",\n");

        builder.append("\"pattern\": [\n");
        builder.append("\"xxx\",\n");
        builder.append("\" y \",\n");
        builder.append("\" y \"\n");
        builder.append("],\n");
        builder.append("\"key\": {\n");
        builder.append("\"x\": {\n");
        builder.append(" \"item\": \"bitlabs:structuregel\"\n");
        builder.append(" },\n");
        builder.append("\"y\": {\n");
        builder.append("\"item\": \"minecraft:stick\"\n");
        builder.append("}\n");
        builder.append("},\n");
        builder.append("\"result\": {\n");
        builder.append("\"item\": \"minecraft:diamond_pickaxe\"\n");
        builder.append("}\n");
        builder.append("}\n");


        String s = builder.toString()

        // create the folders if it does not exist.(otherwise it will throw exception)
        File extraFolder = new File( "${project.projectDir}/src/main/resources/data/"+MODID+"/recipes")
        if( !extraFolder.exists() ) {
            extraFolder.mkdirs()
        }
        // create the file and write text to it.
        new File("${project.projectDir}/src/main/resources/data/"+MODID+"/recipes/"+name+".json").text = s
    }

    def shapelessRecipeJSON(name){

        StringBuilder builder = new StringBuilder();

        builder.append("{\n");
        builder.append("\"type\": \"minecraft:crafting_shapeless\",\n");
        builder.append("\"ingredients\": [\n");
        builder.append("{");
        builder.append( "\"item\": \"minecraft:coal\"\n");
        builder.append("},\n");
        builder.append("{\n");
        builder.append( "\"item\": \"minecraft:torch\"\n");
        builder.append("}\n");
        builder.append("],\n");
        builder.append("\"result\":\n");
        builder.append("{\n");
        builder.append("\"item\": \"minecraft:book\",\n");
        builder.append("\"count\": 1\n");
        builder.append("}\n");
        builder.append("}\n");


        String s = builder.toString()

        // create the folders if it does not exist.(otherwise it will throw exception)
        File extraFolder = new File( "${project.projectDir}/src/main/resources/data/"+MODID+"/recipes")
        if( !extraFolder.exists() ) {
            extraFolder.mkdirs()
        }
        // create the file and write text to it.
        new File("${project.projectDir}/src/main/resources/data/"+MODID+"/recipes/"+name+".json").text = s
    }

    @TaskAction
    def greet() {
        String[] listy
        new File("${project.projectDir}/src/main/resources/generate/recipes").eachLine { line ->
            listy = line.split(" ")
            if(listy[0].equals("shaped")){
                shapedRecipeJSON(listy[1])
            }
            if(listy[0].equals("shapeless")){
                shapelessRecipeJSON(listy[1])
            }

        }
        // println greeting
    }
}

task generateRecipeJSONs(type: RecipeJSONTask){
    group = 'forgegradle runs'
    description = 'A gradle task to generate all recipe jsons in the recipes file. Use shaped and shapeless to indicate the recipe type.'
}